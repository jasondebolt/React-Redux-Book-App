import React, { Component } from 'react';
import { connect } from 'react-redux';
import { selectBook } from '../actions/index';
// 'bindActionCreators' is a function that ensures that the actions
// that are generated by our action creators end up flowing through all of our
// reducers.
import { bindActionCreators } from 'redux';

class BookList extends Component {
  renderList() {
    return this.props.books.map((book) => {
      return (
        <li
          key={book.title}
          onClick={() => this.props.selectBook(book) }
          className="list-group-item">
          {book.title}
        </li>
      )
    })
  }

  render() {
    return (
      <ul className="list-group col-sm-4">
        {this.renderList()}
      </ul>
    )
  }
}

// This function takes our application state.
// Whatever is returned from here will show up as props inside
// of BookList.
// The function simply maps application state to props.
// It can be used to pass a subset of application state members
// to the BookList component as individual properties.
// Whenever state changes ANYWHERE in the application, this container
// (BookList) will automatically be re-rendered.
function mapStateToProps(state) {

  // Whatever is contained in this object will be available
  // as this.props of our BookList Component.
  return {
    books: state.books
  };
}


// Anything returned from this function will end up as props on the
// BookList container.
// Just like in the above 'mapStateToProps' function mapping application
// state to container properties, this 'mapDispatchToProps' says that
// whatever is return from this function (i.e. the 'selectBook' function), or
// whater we pass as the first argument to 'bindActionCreators', is going
// to be available as 'props' to our  container. So, now we can call
// 'this.props.selectBook'. Calling 'this.props.selectBook' within our
// BookList container will call our action creator. This is how actions are
// propogated throughout your application! You cannot just call 'selectBook'
// directly; you need to set up this mapping and then call
// 'this.props.selectBook'
function mapDispatchToProps(dispatch) {
  // Whenever 'selectBook' is called, the result should be passed
  // to ALL of our reducers.
  // The purpose of 'bindActionCreators' is the take whatever gets
  // returned from 'selectBook' and make sure it flows through all of
  // the reducers.
  return bindActionCreators({ selectBook: selectBook }, dispatch)
}

// Take our component (BookList), our 'mapStateToProps' function, and
// returns a container by making use of the 'connect' function from
// 'react-redux.'
// react-redux is not react nor redux. It is the glue between them.
// 'connect' takes a function and a component and returns a 'container'
// A container is like a special component that is 'aware' of the state provided
// by redux.
// This function is the glue between React and Redux.
// We later added the 'mapDispatchToProps' function to this 'connect' call.
// The BookList component also needs to know about the new dispatch method
// 'selectBook'. Make 'selectBook' available as a prop.
export default connect(mapStateToProps, mapDispatchToProps)(BookList)
